> All cards can be defined and managed through .lg files.
> All cards use the chatdown notation - see here - https://github.com/Microsoft/botbuilder-tools/tree/master/packages/Chatdown#message-commands
> Multi-line text are enclosed in ```
> Multi-line text can include inline expressions enclosed in ${expression}.
> ${TemplateName()} is an inline expression that uses the lgTemplate pre-built function to evaluate a template by name.

# HeroCard
[HeroCard
    title = BotFramework Hero Card
    subtitle = Microsoft Bot Framework
    text = Build and connect intelligent bots to interact with your users naturally wherever they are, from text/sms to Skype, Slack, Office 365 mail and other popular services.
    image = ${CardImageTemplate('https://sec.ch9.ms/ch9/7ff5/e07cfef0-aa3b-40bb-9baa-7c9ef8ff7ff5/buildreactionbotframework_960.jpg')}
    buttons = ${CardActionTemplate('openUrl', 'Get started', 'https://docs.microsoft.com/bot-framework')}
]

# CardActionTemplate(type, title, value)
[CardAction
    Type = ${if(type == null, 'imBack', type)}
    Title = ${title}
    Value = ${value}
    Text = ${title}
]

# SubmitActionTemplate(type, title, data)
[SubmitAction
    Type = ${if(type == null, 'Action.Submit', type)}
    Title = ${title}
    Data = ${json(submitactiondatajson())}
]

#submitactiondatajson()
- ```
{
  "key": "value"
}
```

# ThumbnailCard
[ThumbnailCard
    title = BotFramework Thumbnail Card
    subtitle = Microsoft Bot Framework
    text = Build and connect intelligent bots to interact with your users naturally wherever they are, from text/sms to Skype, Slack, Office 365 mail and other popular services.
    image = ${CardImageTemplate('https://sec.ch9.ms/ch9/7ff5/e07cfef0-aa3b-40bb-9baa-7c9ef8ff7ff5/buildreactionbotframework_960.jpg')}
    buttons = ${CardActionTemplate('openUrl', 'Get Started', 'https://docs.microsoft.com/bot-framework')}
]

# ReceiptCard
[ReceiptCard
  title = John Doe
  facts = ${FactTemplate('Order Number', '1234')} | ${FactTemplate('Payment Method', 'VISA 5555-****')}
  items = ${ReceiptItemTemplate('Data Transfer', '$ 38.45', '368', 'https://github.com/amido/azure-vector-icons/raw/master/renders/traffic-manager.png')} | ${ReceiptItemTemplate('App Service', '$ 45.00', '720', 'https://github.com/amido/azure-vector-icons/raw/master/renders/cloud-service.png')}
  tax = $ 7.50
  total = $ 90.95
  buttons = ${CardActionTemplate('openUrl', 'More information', 'https://azure.microsoft.com/en-us/pricing/')}
]

#ReceiptItemTemplate (title, price, quantity, image)
[ReceiptItem
  title = ${title}
  price = ${price}
  quantity = ${quantity}
  image = ${CardImageTemplate(image)}
]

#FactTemplate (key, value)
[Fact
  key = ${key}
  value = ${value}
]

#CardImageTemplate (url)
[CardImage
  url = ${url}
]

# SigninCard
[SigninCard
    text = BotFramework Sign-in Card
    buttons = ${CardActionTemplate('signin', 'Sign-in', 'https://login.microsoftonline.com/')}
]

# CarouselTemplate
[Activity
    Attachments = ${HeroCard()} | ${HeroCard()} | ${HeroCard()}
    AttachmentLayout = carousel
]

# ListTemplate
[Activity
    Attachments = ${HeroCard()} | ${HeroCard()} | ${HeroCard()}
    AttachmentLayout = list
]

# AnimationCard
[AnimationCard
    title = Animation Card
    media = https://media3.giphy.com/media/xT0xeJpnrWC4XWblEk/giphy.gif?cid=ecf05e47mye7k75sup6tcmadoom8p1q8u03a7g2p3f76upp9&rid=giphy.gif
    autostart = true
]

# VideoCard
[VideoCard
    title = Video Card
    media = https://www.youtube.com/watch?v=LvqzubPZjHE
]

# AudioCard
[AudioCard
    title = Audio Card
    media = http://localhost:3980/api/music
    autoloop = true
]

> The external file reference here 'Resources\adaptiveCard.json' should be marked as 'copy to output directory'
> Note: The external file will be read as text and any language generation templates/ expressions in the content will be evaluated.
> Note: Chatdown already supports the ability to create any card type from its json definition. So you can apply this for not just Adaptive cards but to all card types.

# AdaptiveCard
[Activity
    Attachments = ${json(adaptivecardjson())}
]

# AdaptiveCardBotAction
[Activity
    Attachments = ${json(adaptivecardbotactionjson())}
]

# adaptivecardjson()
- ```
{
  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
  "version": "1.0",
  "type": "AdaptiveCard",
  "speak": "Your flight is confirmed for you and 3 other passengers from San Francisco to Amsterdam on Friday, October 10 8:30 AM",
  "body": [
    {
      "type": "TextBlock",
      "text": "Passengers",
      "weight": "bolder",
      "isSubtle": false
    },
    {
      "type": "TextBlock",
      "text": "PassengerName",
      "separator": true
    },
    {
      "type": "TextBlock",
      "text": "PassengerName",
      "spacing": "none"
    },
    {
      "type": "TextBlock",
      "text": "PassengerName",
      "spacing": "none"
    },
    {
      "type": "TextBlock",
      "text": "2 Stops",
      "weight": "bolder",
      "spacing": "medium"
    },
    {
      "type": "TextBlock",
      "text": "Fri, October 10 8:30 AM",
      "weight": "bolder",
      "spacing": "none"
    },
    {
      "type": "ColumnSet",
      "separator": true,
      "columns": [
        {
          "type": "Column",
          "width": 1,
          "items": [
            {
              "type": "TextBlock",
              "text": "San Francisco",
              "isSubtle": true
            },
            {
              "type": "TextBlock",
              "size": "extraLarge",
              "color": "accent",
              "text": "SFO",
              "spacing": "none"
            }
          ]
        },
        {
          "type": "Column",
          "width": "auto",
          "items": [
            {
              "type": "TextBlock",
              "text": " "
            },
            {
              "type": "Image",
              "url": "http://adaptivecards.io/content/airplane.png",
              "size": "small",
              "spacing": "none"
            }
          ]
        },
        {
          "type": "Column",
          "width": 1,
          "items": [
            {
              "type": "TextBlock",
              "horizontalAlignment": "right",
              "text": "Amsterdam",
              "isSubtle": true
            },
            {
              "type": "TextBlock",
              "horizontalAlignment": "right",
              "size": "extraLarge",
              "color": "accent",
              "text": "AMS",
              "spacing": "none"
            }
          ]
        }
      ]
    },
    {
      "type": "TextBlock",
      "text": "Non-Stop",
      "weight": "bolder",
      "spacing": "medium"
    },
    {
      "type": "TextBlock",
      "text": "Fri, October 18 9:50 PM",
      "weight": "bolder",
      "spacing": "none"
    },
    {
      "type": "ColumnSet",
      "separator": true,
      "columns": [
        {
          "type": "Column",
          "width": 1,
          "items": [
            {
              "type": "TextBlock",
              "text": "Amsterdam",
              "isSubtle": true
            },
            {
              "type": "TextBlock",
              "size": "extraLarge",
              "color": "accent",
              "text": "AMS",
              "spacing": "none"
            }
          ]
        },
        {
          "type": "Column",
          "width": "auto",
          "items": [
            {
              "type": "TextBlock",
              "text": " "
            },
            {
              "type": "Image",
              "url": "http://adaptivecards.io/content/airplane.png",
              "size": "small",
              "spacing": "none"
            }
          ]
        },
        {
          "type": "Column",
          "width": 1,
          "items": [
            {
              "type": "TextBlock",
              "horizontalAlignment": "right",
              "text": "San Francisco",
              "isSubtle": true
            },
            {
              "type": "TextBlock",
              "horizontalAlignment": "right",
              "size": "extraLarge",
              "color": "accent",
              "text": "SFO",
              "spacing": "none"
            }
          ]
        }
      ]
    },
    {
      "type": "ColumnSet",
      "spacing": "medium",
      "columns": [
        {
          "type": "Column",
          "width": "1",
          "items": [
            {
              "type": "TextBlock",
              "text": "Total",
              "size": "medium",
              "isSubtle": true
            }
          ]
        },
        {
          "type": "Column",
          "width": 1,
          "items": [
            {
              "type": "TextBlock",
              "horizontalAlignment": "right",
              "text": "$4,032.54",
              "size": "medium",
              "weight": "bolder"
            }
          ]
        }
      ]
    }
  ]
}
```

# adaptivecardbotactionjson()
- ```
{
  "type": "AdaptiveCard",
  "version": "1.2",
  "body": [
    {
      "type": "TextBlock",
      "text": "Bot Builder actions"
    }
  ],
  "actions": [
    {
      "type": "Action.Submit",
      "title": "imBack",
      "data": {
        "msteams": {
          "type": "imBack",
          "value": "text"
        }
      }
    },
    {
      "type": "Action.Submit",
      "value": {
        "key": "value"
      },
      "title": "message back"
    },
    {
      "type": "Action.Submit",
      "title": "message back local echo",
      "text": "text received by bots",
      "displayText": "display text message back",
      "value": {
        "key": "value"
      }
    },
    {
      "type": "Action.Submit",
      "title": "invoke",
      "value": {
        "key": "value"
      }
    }
  ]
}
```